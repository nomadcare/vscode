// File: claudeClient.ts

import fetch from "node-fetch";
import { Message } from "./projectState";

const CLAUDE_API_URL = "https://api.anthropic.com/v1/messages";
const ANTHROPIC_VERSION = "2023-06-01";

const MODEL_TOKEN_LIMITS: Record<string, number> = {
	"claude-3-5-haiku-20241022": 8192,
	"claude-3-7-sonnet-20250219": 10000,
};

/**
 * –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π SYSTEM_PROMPT ‚Äî –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è:
 */
const SYSTEM_PROMPT = [
	"–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ Expo (React Native).",
	"",
	"–ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–∏–ø–∞ ‚ÄúCreate expo app‚Äù —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—ë—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω create-expo-app (managed workflow):",
	"- package.json",
	"- app.json",
	"- babel.config.js",
	"- metro.config.js (c watcher.enablePolling: true, interval: 1000 –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∏–º–ø–æ—Ä—Ç–∞ `punycode` —á–µ—Ä–µ–∑ extraNodeModules)",
	"- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö `punycode` (npm install punycode)",
	"- .gitignore",
	"- App.js",
	"- README.md",
	"- –ü–∞–ø–∫—É assets —Å placeholder-–∑–∞–≥–ª—É—à–∫–∞–º–∏ icon.png –∏ splash.png",
	"–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏ ‚Äî –¥–æ–±–∞–≤—å –∏—Ö —Ç–æ–∂–µ.",
	"",
	"‚ö†Ô∏è **–í–ê–ñ–ù–û**: —Ñ–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞ _–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω_. –û—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Ç—Ä–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞ –î–û–õ–ñ–ù–ê –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.",
	"–ó–∞—Ç–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∞ `// File: <–∏–º—è_—Ñ–∞–π–ª–∞>` (–∏–ª–∏ `// Folder: <–∏–º—è_–ø–∞–ø–∫–∏>`).",
	"–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–≤—å `// File:` –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ, —á—Ç–æ –∏ ```. ",
	"",
	"–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:",
	"```javascript",
	"// File: package.json",
	"{",
	'  "name": "my-app"',
	"}",
	"```",
	"",
	"–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–∏:",
	"```text",
	"// Folder: src",
	"```",
	"",
	"–ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∑–∞–ø—É—Å–∫–∞:",
	"```shell",
	"npm install punycode && npm install && npx expo start",
	"```",
	"",
	"–ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –≤–Ω–µ —ç—Ç–∏—Ö Markdown-–±–ª–æ–∫–æ–≤.",
	"üîÑ **–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–∂–µ –ø—Ä–æ—Å–∏—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û",
	"—Ç–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ –Ω–æ–≤—ã–µ; –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞–π —Ç–æ,",
	"—á—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.**",
].join("\n");

export class ClaudeClient {
	private apiKey?: string;

	constructor(apiKey?: string) {
		this.apiKey = apiKey;
	}

	async sendMessageStream(
		messages: Message[],
		model: string,
		onData: (partialText: string) => void,
		systemPromptOverride?: string
	): Promise<string> {
		if (!this.apiKey) {
			throw new Error("API –∫–ª—é—á Claude –Ω–µ –∑–∞–¥–∞–Ω.");
		}

		const maxTokens = MODEL_TOKEN_LIMITS[model] ?? 8192;
		const prompt = systemPromptOverride ?? SYSTEM_PROMPT;

		const payload = {
			model,
			messages: messages.map((m) => ({ role: m.role, content: m.content })),
			max_tokens: maxTokens,
			system: prompt,
			stream: true,
		};

		const resp = await fetch(CLAUDE_API_URL, {
			method: "POST",
			headers: {
				"x-api-key": this.apiKey,
				"anthropic-version": ANTHROPIC_VERSION,
				"content-type": "application/json",
			},
			body: JSON.stringify(payload),
		});

		if (!resp.ok) {
			const text = await resp.text();
			throw new Error(`Claude API error ${resp.status}: ${text}`);
		}
		if (!resp.body) {
			throw new Error("–ü—É—Å—Ç–æ–π –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude.");
		}

		const decoder = new TextDecoder();
		let buffer = "";
		let full = "";

		for await (const chunk of resp.body as unknown as AsyncIterable<Uint8Array>) {
			buffer += decoder.decode(chunk, { stream: true });
			const lines = buffer.split("\n");
			buffer = lines.pop()!;

			for (const line of lines) {
				if (!line.trim().startsWith("data:")) continue;
				const dataStr = line.replace(/^data:\s*/, "");
				if (dataStr === "[DONE]") continue;
				try {
					const data = JSON.parse(dataStr);
					if (
						data.type === "content_block_delta" &&
						data.delta?.type === "text_delta" &&
						data.delta.text
					) {
						const txt = data.delta.text;
						full += txt;
						onData(txt);
					}
					if (data.type === "message_stop") {
						return full;
					}
				} catch {
					// ignore parse errors
				}
			}
		}
		return full;
	}
}
